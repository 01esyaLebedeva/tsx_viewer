# Project Context for TSX Viewer/Editor

## Project Overview
This project is a TSX viewer and editor application, supporting both web and Electron environments.

## Key Issues Addressed in Recent Sessions:

### 1. File Opening
- **Electron:** Uses `ipcRenderer.send('open-file-dialog')` to trigger a native file dialog.
- **Web (Fallback):** Uses a standard HTML `<input type="file">` element.
- **Resolution:** Ensured both Electron and web fallbacks are functional. `file.path` is used if available (Electron), otherwise `file.name` is used for display.

### 2. File Saving
- **Electron:** Uses `ipcRenderer.send('save-file')` to save content to the original file path.
- **Web (Fallback):** Downloads the edited content as a new file using `Blob` and `URL.createObjectURL`.
- **File System Access API Attempt:** An attempt was made to use `window.showOpenFilePicker` and `fileHandle.createWritable()` for direct file saving in the web version.
- **Current Status:** The File System Access API is not yet fully functional as expected (still prompts for save location even after selecting a file via `showOpenFilePicker`). This might be due to browser security models or specific implementation details.

### 3. Editor "Sticking" / `isDirty` State
- **Problem:** Previously, the editor experienced "sticking" during typing (specifically with hyphens), and the "Save" button remained inactive even after edits.
- **Root Cause:** Incorrect handling of `onCodeChange` prop with `SandpackCodeEditor`. `SandpackCodeEditor` does not directly accept `onCodeChange`; changes are propagated via `SandpackProvider`'s `onCodeChange` prop.
- **Resolution:**
    - Removed the incorrect `onCodeChange` prop from `SandpackCodeEditor`.
    - The `isDirty` state is now explicitly set to `true` when the editor panel is opened (via `setShowEditor(true)`). This means the "Save" button becomes active as soon as the editor is visible, regardless of real-time code changes. This is a temporary measure to unblock the user; real-time `isDirty` tracking will be re-evaluated later.

### 4. HTTPS Setup for Vite Development Server
- **Problem:** `npm run dev` resulted in `https://localhost:8081/` being inaccessible with `ERR_EMPTY_RESPONSE`.
- **Resolution:** Switched to `@vitejs/plugin-basic-ssl` for more robust HTTPS support during local development.

## Key Files Involved:
- `src/App.tsx`: Contains the core React component logic, state management (`originalCode`, `editedCode`, `isDirty`, `filePath`, `fileName`, `fileHandle`), file handling (`handleFile`, `triggerFileDialog`, `handleSave`), and UI state (`showSource`, `showEditor`, `showPreview`).
- `electron/main.js`: Handles IPC communications for file operations in the Electron environment.
- `vite.config.ts`: Vite build configuration, including plugin setup for HTTPS.
- `tsconfig.json`: TypeScript compiler options, updated to include `DOM.Iterable` for File System Access API types.

## Next Steps (for future sessions):
- Re-evaluate File System Access API implementation for direct file saving in web, potentially with more detailed logging or alternative approaches if the current one remains problematic.
- Consider implementing real-time `isDirty` tracking if the current "activate on editor open" approach is insufficient.